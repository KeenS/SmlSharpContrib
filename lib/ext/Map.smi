_require "basis.smi"

functor Map
  (X : sig 
         type t 

         val compare : t * t -> order
       end) = 
struct 
  type key = X.t
  
  type 'elt t (= boxed)

  val cardinal : 'a t -> int
  
  val empty : 'a t
  
  val isEmpty : 'a t -> bool
  
  val mem : key -> 'a t -> bool
  
  val find : key -> 'a t -> 'a option
  
  val add : key -> 'a -> 'a t -> 'a t
  
  val remove : key -> 'a t -> 'a t
  
  val split :
    key -> 'a t -> { less : 'a t, data : 'a option, greater : 'a t }
  
  val elements : 'a t -> (key * 'a) list
  
  val fold : (key * 'a * 'b -> 'b) -> 'a t -> 'b -> 'b
  
  val equal : ('a * 'a -> bool) -> 'a t * 'a t -> bool
  
  val map : ('a -> 'b) -> 'a t -> 'b t
  
  val mapi : (key * 'a -> 'b) -> 'a t -> 'b t
  
  val mapPartial : (key * 'a -> 'b option) -> 'a t -> 'b t
  
  val pairMap :
    ('a option * 'b option -> 'c option) -> 'a t * 'b t -> 'c t
end
