_require "basis.smi"

functor Set 
  (X : sig 
         type t 

         val compare : t * t -> order
       end
  ) =
struct
  type elt = X.t
  type t (= boxed)
  
  val empty : t
  val isEmpty : t -> bool
  val mem : X.t -> t -> bool
  val minElt : t -> elt option
  val maxElt : t -> elt option
  val choose : t -> elt option
  val fold : (elt * 'a -> 'a) -> t -> 'a -> 'a
  val elements : t -> X.t list
  val revElements : t -> X.t list
  val cardinal : t -> int
  val forall : (elt -> bool) -> t -> bool
  val exists : (elt -> bool) -> t -> bool
  val compare : t * t -> order
  val equal : t * t -> bool
  val subset : t * t -> bool
  val singleton : X.t -> t
  val add : X.t -> t -> t
  val remove : X.t -> t -> t
  val split : X.t -> t -> { present : bool, less : t, greater : t }
  val inter : t * t -> t
  val diff : t * t -> t
  val union : t * t -> t
  val filter : (elt -> bool) -> t -> t
  val partition : (elt -> bool) -> t -> { satisfy : t, dissatisfy : t }
end
