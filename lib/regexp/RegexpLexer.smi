_require "basis.smi"

functor RegexpLexer(X:sig
                        structure C: sig
                                      eqtype char
                                             eqtype string
                                      val ord: char -> int
                                      val chr: int -> char
                                      val minChar: char
                                      val maxChar: char
                                      val notContains: string -> char -> bool
                                  end
                        structure S: sig
                                      eqtype char
                                             eqtype string
                                      val toString: string -> String.string
                                      val implode: char list -> string
                                      val explode: string -> char list
                                  end                                   
                        sharing type C.char = S.char
                        sharing type C.string = S.string
                    end) =
struct
    type char = X.C.char
    type string = X.S.string
    exception Lex
    datatype t
      = SOS
      | Char of char
      | Hat
      | Dollar
      | Dot
      | Star
      | Plus
      | Bar
      | Option
      | LeftParen
      | RightParen
      | LeftBracket
      | RightBrackt
      | LeftBrace
      | RightBrace
      | Hyphen
      | Bang
      | Comma
      | EOS
    val toChar: t -> t
    val lex: string -> t list
end
