_require "basis.smi"
_require "REGEXP_MATCHER.sig"



functor Regexp(X: sig
                   structure S: sig
                                 eqtype char
                                        eqtype string
                                 val ^ : string * string -> string
                                 val sub: string * int -> char
                                 val size: string -> int
                                 val implode: char list -> string
                                 val substring: string * int * int -> string
                                 val extract: string * int * int option -> string
                             end
                   structure Matcher: sig
                                 eqtype char
                                        eqtype string
                                 type t
                                 val match: t * string * int -> (int * int * ((int * int) array)) option
                             end
                   sharing type S.string = Matcher.string
                   sharing type S.char = Matcher.char
               end
              ) = struct
    type t = X.Matcher.t
    val match : X.Matcher.t * X.Matcher.string * int ->  (int * int * ((int * int) array)) option
    val doesMatch : X.Matcher.t * X.Matcher.string * int -> bool
    val matchString : X.Matcher.t * X.Matcher.string * int -> (X.Matcher.string * X.Matcher.string array) option
    val matchStrings : X.Matcher.t * X.Matcher.string * int -> X.Matcher.string list
    val split : X.Matcher.t * X.Matcher.string * int -> X.Matcher.string list
    val replace : X.Matcher.t * X.Matcher.string * int * X.Matcher.string-> X.Matcher.string
    val replaceAll : X.Matcher.t * X.Matcher.string * int * X.Matcher.string -> X.Matcher.string
end

