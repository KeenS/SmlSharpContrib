_require "basis.smi"
structure Re = struct
datatype ast
  = Item of char
  | LineStart
  | LineEnd
  | Or of ast list
  | And of ast list
  | Kleene of ast
  | Group of int * ast
  | Any
  | Empty

type t = ast * int

exception Lex
exception Parse

val re : string -> t
val match : t * string * int ->  (int * int * ((int * int) array)) option
val matchString : t * string * int -> (string * string array) option
val matchStrings : t * string * int -> string list
val doesMatch : t * string * int -> bool
val split : t * string * int -> string list
val replace : t * string * int * string-> string
val replaceAll : t * string * int * string -> string
end

